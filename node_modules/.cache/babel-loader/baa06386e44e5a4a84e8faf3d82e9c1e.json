{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from '../providers/config/provider';\nimport { BlockNumberProvider } from './blockNumber/provider';\nimport { ChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { EthersProvider } from './EthersProvider';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nexport function DAppProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    }, void 0)\n  }), void 0);\n}\n\nvar getMulticallAddresses = function getMulticallAddresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.map(function (network) {\n    return result[network.chainId] = network.multicallAddress;\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  var children = _ref2.children;\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses,\n      networks = _useConfig.networks;\n\n  var defaultAddresses = useMemo(function () {\n    return getMulticallAddresses(networks);\n  }, [networks]);\n  var multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(EthersProvider, {\n    children: _jsxs(BlockNumberProvider, {\n      children: [_jsx(NetworkActivator, {}, void 0), _jsx(LocalMulticallProvider, {\n        children: _jsx(ChainStateProvider, Object.assign({\n          multicallAddresses: multicallAddressesMerged\n        }, {\n          children: _jsx(NotificationsProvider, {\n            children: _jsx(TransactionProvider, {\n              children: children\n            }, void 0)\n          }, void 0)\n        }), void 0)\n      }, void 0)]\n    }, void 0)\n  }, void 0);\n}","map":null,"metadata":{},"sourceType":"module"}