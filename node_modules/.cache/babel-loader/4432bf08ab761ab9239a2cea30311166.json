{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useUnityLoader = exports.Status = void 0;\n\nvar react_1 = require(\"react\");\n\nvar Status;\n\n(function (Status) {\n  Status[\"Idle\"] = \"Idle\";\n  Status[\"Loading\"] = \"Loading\";\n  Status[\"Loaded\"] = \"Loaded\";\n  Status[\"Error\"] = \"Error\";\n})(Status = exports.Status || (exports.Status = {}));\n/**\n * Hook to embed a Unity Loader script.\n * @param src The source of the unity loader\n * @returns a hook that returns the status of the loader\n */\n\n\nfunction useUnityLoader(src) {\n  var _a = react_1.useState(src ? Status.Loading : Status.Idle),\n      status = _a[0],\n      setStatus = _a[1]; // Effect hook will be invoked when the src changes.\n\n\n  react_1.useEffect(function () {\n    if (src === null) {\n      setStatus(Status.Idle);\n      return;\n    } // Fetch existing script element by src\n    // It may have been added by another instance of this hook\n\n\n    var script = document.querySelector(\"script[src=\\\"\" + src + \"\\\"]\");\n\n    if (script === null) {\n      // Create script\n      script = document.createElement(\"script\");\n      script.src = src;\n      script.async = true;\n      script.setAttribute(\"data-status\", \"loading\"); // Add script to document body\n\n      document.body.appendChild(script); // Store status in attribute on script\n      // This can be read by other instances of this hook\n\n      var setAttributeFromEvent = function setAttributeFromEvent(event) {\n        script === null || script === void 0 ? void 0 : script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n      };\n\n      script.addEventListener(\"load\", setAttributeFromEvent);\n      script.addEventListener(\"error\", setAttributeFromEvent);\n    } else {\n      // Grab existing script status from attribute and set to state.\n      setStatus(script.getAttribute(\"data-status\") === \"ready\" ? Status.Loaded : Status.Error);\n    } // Script event handler to update status in state\n    // Note: Even if the script already exists we still need to add\n    // event handlers to update the state for *this* hook instance.\n\n\n    var setStateFromEvent = function setStateFromEvent(event) {\n      setStatus(event.type === \"load\" ? Status.Loaded : Status.Error);\n    }; // Add event listeners\n\n\n    script.addEventListener(\"load\", setStateFromEvent);\n    script.addEventListener(\"error\", setStateFromEvent); // Remove event listeners on cleanup\n\n    return function () {\n      if (script) {\n        script.removeEventListener(\"load\", setStateFromEvent);\n        script.removeEventListener(\"error\", setStateFromEvent);\n        document.body.removeChild(script);\n      }\n    };\n  }, [src] // Only re-run effect if script src changes\n  );\n  return status;\n}\n\nexports.useUnityLoader = useUnityLoader;","map":null,"metadata":{},"sourceType":"script"}