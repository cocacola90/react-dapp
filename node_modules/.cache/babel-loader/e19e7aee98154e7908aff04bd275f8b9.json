{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers, useLocalStorage } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber';\nimport { useNotificationsContext } from '../notifications/context';\nimport { TransactionsContext } from './context';\nimport { DEFAULT_STORED_TRANSACTIONS } from './model';\nimport { transactionReducer } from './reducer';\nimport { useConfig } from '../config';\nexport function TransactionProvider(_ref) {\n  var children = _ref.children;\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      library = _useEthers.library;\n\n  var blockNumber = useBlockNumber();\n\n  var _useConfig = useConfig(),\n      localStorage = _useConfig.localStorage;\n\n  var _useLocalStorage = useLocalStorage(localStorage.transactionPath),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      storage = _useLocalStorage2[0],\n      setStorage = _useLocalStorage2[1];\n\n  var _useReducer = useReducer(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      transactions = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification;\n\n  useEffect(function () {\n    setStorage(transactions);\n  }, [transactions]);\n  var addTransaction = useCallback(function (payload) {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload: payload\n    });\n    addNotification({\n      notification: {\n        type: 'transactionStarted',\n        transaction: payload.transaction,\n        submittedAt: payload.submittedAt,\n        transactionName: payload.transactionName\n      },\n      chainId: payload.transaction.chainId\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    var updateTransactions = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _a, checkTransaction, chainTransactions, newTransactions, _iterator, _step, tx, newTransaction;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!chainId || !library || !blockNumber)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                checkTransaction = /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx) {\n                    var receipt, type;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(tx.receipt || !shouldCheck(blockNumber, tx))) {\n                              _context.next = 2;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", tx);\n\n                          case 2:\n                            _context.prev = 2;\n                            _context.next = 5;\n                            return library.getTransactionReceipt(tx.transaction.hash);\n\n                          case 5:\n                            receipt = _context.sent;\n\n                            if (!receipt) {\n                              _context.next = 12;\n                              break;\n                            }\n\n                            type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed';\n                            addNotification({\n                              notification: {\n                                type: type,\n                                submittedAt: Date.now(),\n                                transaction: tx.transaction,\n                                receipt: receipt,\n                                transactionName: tx.transactionName\n                              },\n                              chainId: chainId\n                            });\n                            return _context.abrupt(\"return\", Object.assign(Object.assign({}, tx), {\n                              receipt: receipt\n                            }));\n\n                          case 12:\n                            return _context.abrupt(\"return\", Object.assign(Object.assign({}, tx), {\n                              lastCheckedBlockNumber: blockNumber\n                            }));\n\n                          case 13:\n                            _context.next = 18;\n                            break;\n\n                          case 15:\n                            _context.prev = 15;\n                            _context.t0 = _context[\"catch\"](2);\n                            console.error(\"failed to check transaction hash: \".concat(tx.transaction.hash), _context.t0);\n\n                          case 18:\n                            return _context.abrupt(\"return\", tx);\n\n                          case 19:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[2, 15]]);\n                  }));\n\n                  return function checkTransaction(_x) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }();\n\n                chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];\n                newTransactions = [];\n                _iterator = _createForOfIteratorHelper(chainTransactions);\n                _context2.prev = 6;\n\n                _iterator.s();\n\n              case 8:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                tx = _step.value;\n                _context2.next = 12;\n                return checkTransaction(tx);\n\n              case 12:\n                newTransaction = _context2.sent;\n                newTransactions.push(newTransaction);\n\n              case 14:\n                _context2.next = 8;\n                break;\n\n              case 16:\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](6);\n\n                _iterator.e(_context2.t0);\n\n              case 21:\n                _context2.prev = 21;\n\n                _iterator.f();\n\n                return _context2.finish(21);\n\n              case 24:\n                dispatch({\n                  type: 'UPDATE_TRANSACTIONS',\n                  chainId: chainId,\n                  transactions: newTransactions\n                });\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[6, 18, 21, 24]]);\n      }));\n\n      return function updateTransactions() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    updateTransactions();\n  }, [chainId, library, blockNumber]);\n  return _jsx(TransactionsContext.Provider, {\n    value: {\n      transactions: transactions,\n      addTransaction: addTransaction\n    },\n    children: children\n  }, void 0);\n}\n\nfunction shouldCheck(blockNumber, tx) {\n  if (tx.receipt) {\n    return false;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true;\n  }\n\n  var blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;\n\n  if (blocksSinceCheck < 1) {\n    return false;\n  }\n\n  var minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}