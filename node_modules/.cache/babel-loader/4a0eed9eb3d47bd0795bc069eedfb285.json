{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\n\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\n\nvar dispatchReactUnityEvent = function dispatchReactUnityEvent(eventName) {\n  var parameters = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    parameters[_i - 1] = arguments[_i];\n  } // This made should be made available to the global scope. When invoked, it\n  // will dispatch the given event to all event systems.\n\n\n  for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n    var eventSystem = eventSystems_1[_a];\n\n    if (typeof eventSystem !== \"undefined\") {\n      eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters));\n    }\n  }\n};\n/**\n * An event system.\n */\n\n\nvar EventSystem =\n/** @class */\nfunction () {\n  function EventSystem() {\n    /**\n     * The event map contains all the events that have been registered to the\n     * event system as a key-value pair of event name and event listener.\n     * @private\n     * @readonly\n     */\n    this.eventMap = new Map(); // The event system will be pushed to the global list of event system\n    // instances.\n\n    eventSystems.push(this); // If we're running inside of a browser environment, some global properties\n    // will be made available on the window allowing for Unity to communicate.\n\n    if (typeof window !== \"undefined\") {\n      // Register the global dispatch method.\n      if (typeof window.dispatchReactUnityEvent === \"undefined\") {\n        window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n      } // Create object for legacy bindings on the window.\n\n\n      if (typeof window.ReactUnityWebGL === \"undefined\") {\n        window.ReactUnityWebGL = {};\n      }\n    }\n  }\n  /**\n   * Registers an event to the system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {Function} eventListener the event's function\n   */\n\n\n  EventSystem.prototype.on = function (eventName, eventListener) {\n    // Adds the event to the event map.\n    this.eventMap.set(eventName, eventListener); // Add legacy binding to the window.\n\n    if (typeof window !== \"undefined\") {\n      window.ReactUnityWebGL[eventName] = function () {\n        var parameters = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          parameters[_i] = arguments[_i];\n        }\n\n        return eventListener.apply(void 0, parameters);\n      };\n    }\n  };\n  /**\n   * Removes all the Event Listeners with a specific Event Name.\n   * @public\n   * @param {string} eventName the event's name\n   * @example unityContext.removeEventListener(\"progress\");\n   */\n\n\n  EventSystem.prototype.removeEventListener = function (eventName) {\n    // Remove the event from the event map.\n    this.eventMap.delete(eventName); // Remove legacy binding from the window.\n\n    if (typeof window !== \"undefined\") {\n      delete window.ReactUnityWebGL[eventName];\n    }\n  };\n  /**\n   * Removes all the Event Listeners.\n   * @public\n   * @example unityContext.removeAllEventListeners();\n   */\n\n\n  EventSystem.prototype.removeAllEventListeners = function () {\n    // Remove legacy bindings from the window.\n    if (typeof window !== \"undefined\") {\n      this.eventMap.forEach(function (_value, key) {\n        delete window.ReactUnityWebGL[key];\n      });\n    } // Clear the event map.\n\n\n    this.eventMap.clear();\n  };\n  /**\n   * Dispatches an event that has been registered to the event system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {any} parameters the event's parameters\n   * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n   */\n\n\n  EventSystem.prototype.dispatchEvent = function (eventName) {\n    var parameters = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parameters[_i - 1] = arguments[_i];\n    }\n\n    var event = this.eventMap.get(eventName);\n\n    if (typeof event !== \"undefined\") {\n      event.apply(void 0, parameters);\n    }\n  };\n\n  return EventSystem;\n}();\n\nexports.EventSystem = EventSystem;","map":null,"metadata":{},"sourceType":"script"}