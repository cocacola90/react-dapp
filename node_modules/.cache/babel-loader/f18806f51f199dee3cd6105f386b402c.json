{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { errors } from 'ethers';\n\nvar isDroppedAndReplaced = function isDroppedAndReplaced(e) {\n  return (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\n};\n\nexport function usePromiseTransaction(chainId, options) {\n  var _useState = useState({\n    status: 'None'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useTransactionsConte = useTransactionsContext(),\n      addTransaction = _useTransactionsConte.addTransaction;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification;\n\n  var promiseTransaction = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionPromise) {\n      var _a, _b, _c, _d, _e, _f, transaction, receipt, errorMessage, droppedAndReplaced, status, type;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (chainId) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              transaction = undefined;\n              _context.prev = 3;\n              _context.next = 6;\n              return transactionPromise;\n\n            case 6:\n              transaction = _context.sent;\n              setState({\n                transaction: transaction,\n                status: 'Mining',\n                chainId: chainId\n              });\n              addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), {\n                  chainId: chainId\n                }),\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n              });\n              _context.next = 11;\n              return transaction.wait();\n\n            case 11:\n              receipt = _context.sent;\n              setState({\n                receipt: receipt,\n                transaction: transaction,\n                status: 'Success',\n                chainId: chainId\n              });\n              return _context.abrupt(\"return\", receipt);\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              errorMessage = (_e = (_c = (_b = (_a = _context.t0.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : _context.t0.reason) !== null && _c !== void 0 ? _c : (_d = _context.t0.data) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : _context.t0.message;\n\n              if (transaction) {\n                droppedAndReplaced = isDroppedAndReplaced(_context.t0);\n\n                if (droppedAndReplaced) {\n                  status = _context.t0.receipt.status === 0 ? 'Fail' : 'Success';\n                  type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                  addNotification({\n                    notification: {\n                      type: type,\n                      submittedAt: Date.now(),\n                      transaction: _context.t0.replacement,\n                      receipt: _context.t0.receipt,\n                      transactionName: (_f = _context.t0.replacement) === null || _f === void 0 ? void 0 : _f.transactionName,\n                      originalTransaction: transaction\n                    },\n                    chainId: chainId\n                  });\n                  setState({\n                    status: status,\n                    transaction: _context.t0.replacement,\n                    originalTransaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                } else {\n                  setState({\n                    status: 'Fail',\n                    transaction: transaction,\n                    receipt: _context.t0.receipt,\n                    errorMessage: errorMessage,\n                    chainId: chainId\n                  });\n                }\n              } else {\n                setState({\n                  status: 'Exception',\n                  errorMessage: errorMessage,\n                  chainId: chainId\n                });\n              }\n\n              return _context.abrupt(\"return\", undefined);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 16]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [chainId, setState, addTransaction, options]);\n  return {\n    promiseTransaction: promiseTransaction,\n    state: state\n  };\n}","map":null,"metadata":{},"sourceType":"module"}