{"ast":null,"code":"let hook;\n\nif (typeof window !== 'undefined') {\n  hook = window.__USEDAPP_DEVTOOLS_HOOK__;\n} // immediately notify devtools that the page is using it\n\n\nnotifyDevtools({\n  type: 'INIT'\n});\nexport function notifyDevtools(notification) {\n  if (!hook) {\n    return;\n  }\n\n  if (notification.type === 'INIT') {\n    hook.init();\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error);\n    }\n\n    hook.send(notification);\n  }\n}\n\nfunction getErrorMessage(error) {\n  if (error instanceof Error) {\n    return error.message;\n  } else {\n    return '' + error;\n  }\n}","map":{"version":3,"sources":["/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/@usedapp/core/src/providers/devtools.ts"],"names":[],"mappings":"AAmEA,IAAI,IAAJ;;AACA,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,EAAA,IAAI,GAAI,MAAc,CAAC,yBAAvB;AACD,C,CAED;;;AACA,cAAc,CAAC;AAAE,EAAA,IAAI,EAAE;AAAR,CAAD,CAAd;AAEA,OAAM,SAAU,cAAV,CAAyB,YAAzB,EAAmD;AACvD,MAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,MAAI,YAAY,CAAC,IAAb,KAAsB,MAA1B,EAAkC;AAChC,IAAA,IAAI,CAAC,IAAL;AACD,GAFD,MAEO;AACL,QAAI,YAAY,CAAC,IAAb,KAAsB,iBAAtB,IAA2C,YAAY,CAAC,IAAb,KAAsB,eAArE,EAAsF;AACpF,MAAA,YAAY,CAAC,KAAb,GAAqB,eAAe,CAAC,YAAY,CAAC,KAAd,CAApC;AACD;;AACD,IAAA,IAAI,CAAC,IAAL,CAAU,YAAV;AACD;AACF;;AAED,SAAS,eAAT,CAAyB,KAAzB,EAAuC;AACrC,MAAI,KAAK,YAAY,KAArB,EAA4B;AAC1B,WAAO,KAAK,CAAC,OAAb;AACD,GAFD,MAEO;AACL,WAAO,KAAK,KAAZ;AACD;AACF","sourcesContent":["import { ChainId } from '../constants'\nimport { ChainCall, ChainState } from './chainState'\n\n// NOTE: If you modify this file please ensure consistency with\n// packages/extension/src/providers/events/Message.ts\n\ninterface Init {\n  type: 'INIT'\n}\n\ninterface NetworkChanged {\n  type: 'NETWORK_CHANGED'\n  chainId?: ChainId\n  multicallAddress?: string\n}\n\ninterface BlockNumberChanged {\n  type: 'BLOCK_NUMBER_CHANGED'\n  chainId: ChainId\n  blockNumber: number\n}\n\ninterface AccountChanged {\n  type: 'ACCOUNT_CHANGED'\n  address?: string\n}\n\ninterface CallsChanged {\n  type: 'CALLS_CHANGED'\n  chainId?: ChainId\n  calls: ChainCall[]\n}\n\ninterface MulticallSuccess {\n  type: 'MULTICALL_SUCCESS'\n  multicallAddress: string\n  duration: number\n  chainId: ChainId\n  blockNumber: number\n  state: ChainState\n}\n\ninterface MulticallError {\n  type: 'MULTICALL_ERROR'\n  multicallAddress: string\n  duration: number\n  calls: ChainCall[]\n  chainId: ChainId\n  blockNumber: number\n  error: any\n}\n\ninterface GenericError {\n  type: 'GENERIC_ERROR'\n  error: Error\n}\n\ntype Notification =\n  | Init\n  | NetworkChanged\n  | BlockNumberChanged\n  | AccountChanged\n  | CallsChanged\n  | MulticallSuccess\n  | MulticallError\n  | GenericError\n\nlet hook: any\nif (typeof window !== 'undefined') {\n  hook = (window as any).__USEDAPP_DEVTOOLS_HOOK__\n}\n\n// immediately notify devtools that the page is using it\nnotifyDevtools({ type: 'INIT' })\n\nexport function notifyDevtools(notification: Notification) {\n  if (!hook) {\n    return\n  }\n  if (notification.type === 'INIT') {\n    hook.init()\n  } else {\n    if (notification.type === 'MULTICALL_ERROR' || notification.type === 'GENERIC_ERROR') {\n      notification.error = getErrorMessage(notification.error)\n    }\n    hook.send(notification)\n  }\n}\n\nfunction getErrorMessage(error: unknown) {\n  if (error instanceof Error) {\n    return error.message\n  } else {\n    return '' + error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}