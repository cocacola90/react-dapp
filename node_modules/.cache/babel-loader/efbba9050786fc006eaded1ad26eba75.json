{"ast":null,"code":"import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\n\nfunction warnOnInvalidContractCall(call) {\n  console.warn(\"Invalid contract call: address=\".concat(call && call.address, \" method=\").concat(call && call.method, \" args=\").concat(call && call.args));\n}\n\nfunction encodeCallData(call) {\n  if (!call) {\n    return undefined;\n  }\n\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: call.address,\n      data: call.abi.encodeFunctionData(call.method, call.args)\n    };\n  } catch (_a) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n}\n\nexport function useContractCall(call) {\n  return useContractCalls([call])[0];\n}\nexport function useContractCalls(calls) {\n  var results = useChainCalls(calls.map(encodeCallData));\n  return useMemo(function () {\n    return results.map(function (result, idx) {\n      var call = calls[idx];\n\n      if (result === '0x') {\n        warnOnInvalidContractCall(call);\n        return undefined;\n      }\n\n      return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n    });\n  }, [results]);\n}","map":null,"metadata":{},"sourceType":"module"}