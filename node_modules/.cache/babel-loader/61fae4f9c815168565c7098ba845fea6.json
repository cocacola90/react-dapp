{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NetworkConnector } from '@web3-react/network-connector';\nimport { useEffect } from 'react';\nimport { useEthers } from '../hooks';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfig } from './config/context';\nexport function NetworkActivator() {\n  var _useEthers = useEthers(),\n      activate = _useEthers.activate,\n      account = _useEthers.account,\n      connectedChainId = _useEthers.chainId,\n      active = _useEthers.active,\n      connector = _useEthers.connector;\n\n  var _useConfig = useConfig(),\n      networks = _useConfig.networks,\n      readOnlyChainId = _useConfig.readOnlyChainId,\n      readOnlyUrls = _useConfig.readOnlyUrls,\n      autoConnect = _useConfig.autoConnect;\n\n  useEffect(function () {\n    var eagerConnect = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var injected;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                injected = new InjectedConnector({\n                  supportedChainIds: (networks === null || networks === void 0 ? void 0 : networks.map(function (network) {\n                    return network === null || network === void 0 ? void 0 : network.chainId;\n                  })) || []\n                });\n                _context.next = 3;\n                return injected.isAuthorized();\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                activate(injected);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function eagerConnect() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    autoConnect && eagerConnect();\n  }, []);\n  useEffect(function () {\n    if (readOnlyChainId && readOnlyUrls) {\n      if (!active || connector instanceof NetworkConnector && connectedChainId !== readOnlyChainId) {\n        activate(new NetworkConnector({\n          defaultChainId: readOnlyChainId,\n          urls: readOnlyUrls || []\n        }));\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls, active, account, connectedChainId, connector]);\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}