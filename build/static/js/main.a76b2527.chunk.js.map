{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","amount","_useEthers","useEthers","activateBrowserWallet","account","deactivate","sendTransaction","useSendTransaction","transactionName","etherBalance","useEtherBalance","stakingBalance","_useState","useState","_useState2","Object","slicedToArray","isGameOver","_useState3","_useState4","userName","_useState5","_useState6","score","useEffect","on","address","console","log","to","value","react_default","a","createElement","onClick","formatEther","send","concat","distribution_default","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","config","readOnlyChainId","ChainId","Kovan","readOnlyUrls","defineProperty","ReactDOM","render","StrictMode","DAppProvider","src_App_0","document","getElementById"],"mappings":"6OAMMA,EAAe,IAAIC,eAAa,CACpCC,UAAW,8BACXC,QAAS,yBACTC,aAAc,iCACdC,QAAS,2BAQX,IA2DeC,EA1DH,WAAM,IANWC,EAMXC,EAGuCC,cAA/CC,EAHQF,EAGRE,sBAAuBC,EAHfH,EAGeG,QAAUC,EAHzBJ,EAGyBI,WAEjCC,EAAoBC,YAAmB,CAAEC,gBAAiB,kBAA1DF,gBACFG,EAAeC,YAAgBN,GAC/BO,EAAiBD,YARA,8CACPE,EASoBC,oBAAS,GAT7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASTK,EATSH,EAAA,GAAAI,GAAAJ,EAAA,GAUgBD,mBAAS,KAVzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAUTE,EAVSD,EAAA,GAAAE,GAAAF,EAAA,GAWUN,mBAAS,IAXnBS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAWTE,EAXSD,EAAA,GAAAA,EAAA,GAuChB,OAzBAE,oBAAU,WACR/B,EAAagC,GAAG,YAAa,SAAUC,EAAS1B,GAC9C2B,QAAQC,IAAIF,EAAS1B,GACrBM,EAAgB,CAAEuB,GAAIH,EAASI,MAAO9B,MAQxCP,EAAagC,GAAG,WAAY,SAAUL,EAAUG,GAC9CI,QAAQC,IAAIR,EAAUG,KAMxB9B,EAAagC,GAAG,aAAc,WAC5BpB,OAGF,IAGK0B,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WACX/B,MADN,WAIKC,GAAW2B,EAAAC,EAAAC,cAAA,qBAAa7B,GACxBK,IApDkBT,EAoDkBmC,YAAY1B,GAnDzDhB,EAAa2C,KAAK,mBAAoB,sBAAuBpC,QAC7D2B,QAAQC,IAAI5B,KAoDV+B,EAAAC,EAAAC,cAAA,WACC7B,GAAW2B,EAAAC,EAAAC,cAAA,UAAQC,QAAS7B,GAAjB,gBACTM,GAAkBoB,EAAAC,EAAAC,cAAA,kCAA0BE,YAAYxB,GAAtC,UACL,IAAfM,GAAuBc,EAAAC,EAAAC,cAAA,uBAAAI,OAAkBjB,EAAlB,KAAAiB,OAA8Bd,EAA9B,YACtBQ,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAOvC,aAAcA,OCzDZ8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,wBCFRY,EAAkB,CACtBC,gBAAiBC,IAAQC,MACzBC,aAAazC,OAAA0C,EAAA,EAAA1C,CAAA,GACVuC,IAAQC,MAAQ,gEAIrBG,IAASC,OACP5B,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,WAAP,KACE7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAcT,OAAQA,GACpBrB,EAAAC,EAAAC,cAAC6B,EAAD,QAGJC,SAASC,eAAe,SAM1BzB","file":"static/js/main.a76b2527.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport { useEtherBalance, useEthers, useSendTransaction } from '@usedapp/core';\nimport { formatEther,formatUnits} from '@ethersproject/units'\nconst unityContext = new UnityContext({\n  loaderUrl: \"unity/Build/Build.loader.js\",\n  dataUrl: \"unity/Build/Build.data\",\n  frameworkUrl: \"unity/Build/Build.framework.js\",\n  codeUrl: \"unity/Build/Build.wasm\",\n});\n\nfunction EtherBalanceToUnity(amount : string) {\n  unityContext.send(\"GetAddressWallet\", \"EtherBalanceToUnity\", amount);\n  console.log(amount);\n}\n\nconst STAKING_CONTRACT = '0x00000000219ab540356cBB839Cbe05303d7705Fa'\nconst App = () => {\n\n  \n  const { activateBrowserWallet, account , deactivate} = useEthers();\n  \n  const { sendTransaction } = useSendTransaction({ transactionName: 'Send Ethereum' });\n  const etherBalance = useEtherBalance(account);\n  const stakingBalance = useEtherBalance(STAKING_CONTRACT)\n\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [score, setScore] = useState(0);\n\n\n  useEffect(function(){\n    unityContext.on(\"SendTrans\", function (address, amount) {\n      console.log(address, amount);\n      sendTransaction({ to: address, value: amount})\n    });\n    \n    // unityContext.on(\"SendTranscationFromUnity\",( address, amount) => {\n      \n    //   sendTransaction({ to: address, value: amount })\n    // });\n\n    unityContext.on(\"GameOver\", function (userName, score) {\n      console.log(userName, score);\n      // setIsGameOver(true);\n      // setUserName(userName);\n      // setScore(score);\n    });\n\n    unityContext.on(\"Disconnect\", function(){\n      deactivate();\n    });\n\n  },[]);\n\n  \n  return <div>\n    <div>\n      <button onClick={() => { \n            activateBrowserWallet(); \n          }}>Connect</button>\n\n          {account && <p>Account: {account}</p>}\n          {etherBalance && EtherBalanceToUnity(formatEther(etherBalance))}\n    </div>\n    <div>\n    {account && <button onClick={deactivate}> Disconnect </button>}\n      {stakingBalance && <p>ETH2 staking balance: {formatEther(stakingBalance)} ETH </p>}\n    {isGameOver === true && <p>{`Game Over! ${userName} ${score} points`}</p>}\n      <Unity unityContext={unityContext} />\n    </div>\n  </div>\n    \n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChainId, Config, DAppProvider } from '@usedapp/core';\n\nconst config : Config = {\n  readOnlyChainId: ChainId.Kovan,\n  readOnlyUrls: {\n    [ChainId.Kovan]: 'https://kovan.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n  },\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={config}>\n      <App />\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}