{"ast":null,"code":"import _slicedToArray from \"/Users/kenshin/Documents/UnityProject/useDapp_demo/dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { ChainStateContext } from './context';\nimport { chainStateReducer } from './chainStateReducer';\nimport { callsReducer } from './callsReducer';\nimport { multicall } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nimport { addressEqual } from '../..';\nexport function ChainStateProvider(_ref) {\n  var children = _ref.children,\n      multicallAddresses = _ref.multicallAddresses;\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var blockNumber = useBlockNumber();\n\n  var _useReducer = useReducer(callsReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      calls = _useReducer2[0],\n      dispatchCalls = _useReducer2[1];\n\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      state = _useReducer4[0],\n      dispatchState = _useReducer4[1];\n\n  var _useDebouncePair = useDebouncePair(calls, chainId, 50),\n      _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n      debouncedCalls = _useDebouncePair2[0],\n      debouncedId = _useDebouncePair2[1];\n\n  var uniqueCalls = debouncedId === chainId ? getUnique(debouncedCalls) : []; // used for deep equality in hook dependencies\n\n  var uniqueCallsJSON = JSON.stringify(uniqueCalls);\n  var multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n  useEffect(function () {\n    if (library && blockNumber !== undefined && chainId !== undefined) {\n      if (!multicallAddress) {\n        console.error(\"Missing multicall address for chain id \".concat(chainId));\n        return;\n      }\n\n      var start = Date.now();\n      multicall(library, multicallAddress, blockNumber, uniqueCalls).then(function (state) {\n        dispatchState({\n          type: 'FETCH_SUCCESS',\n          blockNumber: blockNumber,\n          chainId: chainId,\n          state: state\n        });\n        notifyDevtools({\n          type: 'MULTICALL_SUCCESS',\n          duration: Date.now() - start,\n          chainId: chainId,\n          blockNumber: blockNumber,\n          multicallAddress: multicallAddress,\n          state: state\n        });\n      }).catch(function (error) {\n        console.error(error);\n        dispatchState({\n          type: 'FETCH_ERROR',\n          blockNumber: blockNumber,\n          chainId: chainId,\n          error: error\n        });\n        notifyDevtools({\n          type: 'MULTICALL_ERROR',\n          duration: Date.now() - start,\n          chainId: chainId,\n          blockNumber: blockNumber,\n          multicallAddress: multicallAddress,\n          calls: uniqueCalls,\n          error: error\n        });\n      });\n    }\n  }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n  var value = chainId !== undefined ? state[chainId] : undefined;\n  var provided = {\n    value: value,\n    multicallAddress: multicallAddress,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(ChainStateContext.Provider, {\n    value: provided,\n    children: children\n  }, void 0);\n}\n\nfunction getUnique(requests) {\n  var unique = [];\n\n  var _iterator = _createForOfIteratorHelper(requests),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var request = _step.value;\n\n      if (!unique.find(function (x) {\n        return addressEqual(x.address, request.address) && x.data === request.data;\n      })) {\n        unique.push(request);\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return unique;\n}","map":null,"metadata":{},"sourceType":"module"}