{"ast":null,"code":"export var DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nvar INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n\n  var number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\n\nfunction formatNumber(options, value) {\n  var integer = getIntegerPart(value, options.decimals);\n  var thousands = splitThousands(integer, options.thousandSeparator);\n  var decimal = getDecimalPart(value, options.decimals);\n  var digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\n\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    var fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\n\nfunction stripFrontZeroes(value) {\n  var stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\n\nfunction splitThousands(value, separator) {\n  var count = value.length / 3;\n  var resultValue = value.split('');\n\n  for (var i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n\n  return resultValue.join('');\n}\n\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\n\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return \"\".concat(integer).concat(separator).concat(decimals);\n  }\n}\n\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  var length = significantDigits - integerLength;\n\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\n\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\n\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}